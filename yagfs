#!/usr/bin/env ruby
# Yet another Git FUSE filesystem

require 'rubygems'
require 'rfuse'
require 'rugged'
require 'set'

include Rugged
include RFuse

module Keyed
  attr_writer :symref_index

  def [] k
    return @symref_index[oid] || '' if @symref_index && k == :symref
    return oid                      if k == :id
    return message                  if k == :message
    return author[k].to_s
  end
end

class Commit
  include Keyed
end

class Tag
  include Keyed

  alias author tagger
end

class Repository
  def lookup_commit id, symref_index
    lookup(id).tap {|commit| commit.symref_index = symref_index}
  end

  def lookup_tag id, symref_index
    lookup(id).tap {|tag| tag.symref_index = symref_index}
  end
end

class YaGFS < Fuse
  def initialize git_dir, mountpoint
    @repo             = Repository.new(git_dir)
    @transformed_refs = {}
    @symbolic_refs    = {}
    @open_files       = {}
    @known_commit_ids = Set.new
    refs.each do |r|
      @transformed_refs[transform_ref r] = r
      @symbolic_refs[revparse r] = transform_ref r
    end

    super mountpoint, []
  end

  ValidCommitFiles = %w(message name time email id symref)
  ValidTagFiles    = %w(message name time email id symref)

  def revparse name
    # The name will have dots instead of slashes, so we need to un-transform.
    name = name.name if name.is_a?(Reference)
    return name if name =~ /^[0-9A-Fa-f]{40}$/

    t = nil
    return Reference.lookup(@repo, t.name).target if t = @transformed_refs[name]
    return Reference.lookup(@repo, name).target rescue nil
  end

  def transform_ref r;  r.name.gsub('/', '.').sub(/^refs\./, ''); end
  def transformed_refs; refs.map {|x| transform_ref x}; end
  def refs;             @repo.refs.select {|r| r.name[0] != '/'}; end

  def dir_stat
    Stat.directory(0555, :uid => 0, :gid => 0, :size => 1)
  end

  def blob_stat data
    # TODO: fix file mode (executable bit)
    Stat.file(0444, :uid => 0, :gid => 0, :size => data.size)
  end

  def object_stat id
    return ref_stat if id =~ /^([0-9A-Fa-f]{40})\/([^\/]+)$/ &&
                       dereference($1, $2)
    if id =~ /^[0-9A-Fa-f]{40}$/
      return nil unless object = @repo.lookup(id)
      return blob_stat object if object.type == :blob
      return dir_stat
    end
  end

  def ref_stat
    Stat.new(Stat::S_IFLNK, 0777, :uid => 0, :gid => 0, :size => 1)
  end

  def getattr context, path
    return dir_stat if path == '/'
    return dir_stat if path == '/objects'

    r = nil
    return blob_stat(@repo.lookup_commit($1, @symbolic_refs)[$2.to_sym]) if
      path =~ /^\/objects\/([0-9A-Fa-f]{40})\/(\w+)$/ &&
      (r = @repo.lookup($1)) &&
      (r.is_a?(Commit) && ValidCommitFiles.member?($2) ||
       r.is_a?(Tag)    && ValidTagFiles.member?($2))

    return ref_stat if
      @transformed_refs[path[1..-1]] ||
      path =~ /^\/objects\/([0-9A-Fa-f]{40})\/([^\/]+)$/ &&
      dereference($1, $2)

    return object_stat(path[9..-1]) if path =~ /^\/objects\//
  end

  def dereference tree_id, entry
    tree = tree_id.is_a?(String) ? @repo.lookup(tree_id) : tree_id

    if tree.is_a? Commit
      return "../#{tree.tree.oid}"             if entry == 'tree'
      return "../#{tree.parents[$1.to_i].oid}" if entry =~ /^parent-(\d+)$/
    elsif tree.is_a? Tag
      return "../#{tree.target.oid}"           if entry == 'commit'
    else
      result = tree.entries.find {|e| e[:name] == entry}
      return "../#{result[:oid]}" if result
    end
  end

  def readlink context, path, size
    return dereference($1, $2) if path =~ /^\/objects\/([^\/]+)\/(.*)/
    return "objects/#{revparse(path[1..-1])}"
  end

  def readdir context, path, filler, offset, ffi
    # For /objects/, we list only the object IDs of commits; we don't list
    # every revision of every file.
    return root_listing filler              if path == '/'
    return commit_listing filler            if path == '/objects'
    return tree_listing path[9..-1], filler if path =~ /^\/objects\//
    raise "#{path} is not a directory"
  end

  def open context, path, ffi
    @open_files[path] = data_for path
  end

  def release context, path, ffi
    @open_files.delete path
  end

  def read context, path, size, offset, ffi
    @open_files[path][offset .. offset + size - 1]
  end

  def data_for path
    return @repo.lookup_commit($1, @symbolic_refs)[$2.to_sym] if
      path =~ /^\/objects\/([0-9A-Fa-f]{40})\/(\w+)$/ &&
      (r = @repo.lookup($1)) &&
      (r.is_a?(Commit) && ValidCommitFiles.member?($2) ||
       r.is_a?(Tag)    && ValidTagFiles.member?($2))

    # Otherwise assume we have a blob.
    hash = path[9..-1]
    return r.content if hash =~ /^[0-9A-Fa-f]{40}/ && (r = @repo.lookup(hash))
  end

  def root_listing filler
    %w(. .. objects).each do |x|
      filler.push x, dir_stat, 0
    end

    @transformed_refs.each_key do |k|
      filler.push k, ref_stat, 0
    end
  end

  def tree_listing id, filler
    obj = @repo.lookup id
    if obj.is_a? Tree
      obj.entries.each do |entry|
        filler.push entry[:name], ref_stat, 0
      end
    elsif obj.is_a? Commit
      filler.push 'tree', ref_stat, 0
      ValidCommitFiles.each do |file|
        filler.push file, blob_stat(obj[file.to_sym]), 0
      end

      obj.parents.each_with_index do |parent, i|
        filler.push "parent-#{i}", ref_stat, 0
      end
    elsif obj.is_a? Tag
      filler.push 'commit', ref_stat, 0
      ValidTagFiles.each do |file|
        filler.push file, blob_stat(obj[file.to_sym]), 0
      end
    end
  end

  def commit_listing filler
    # TODO: fix this (low priority)
  end
end

fs = YaGFS.new(*ARGV)

if fs.mounted?
  Signal.trap('TERM') {fs.exit}
  Signal.trap('INT')  {fs.exit}

  begin
    fs.loop
  ensure
    fs.unmount if fs.mounted?
  end
end
